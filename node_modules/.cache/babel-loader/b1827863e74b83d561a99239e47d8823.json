{"ast":null,"code":"var linker = require('./linker.js'); /// Translate old style version numbers to semver.\n/// Old style: 0.3.6-3fc68da5/Release-Emscripten/clang\n///            0.3.5-371690f0/Release-Emscripten/clang/Interpreter\n///            0.3.5-0/Release-Emscripten/clang/Interpreter\n///            0.2.0-e7098958/.-Emscripten/clang/int linked to libethereum-1.1.1-bbb80ab0/.-Emscripten/clang/int\n///            0.1.3-0/.-/clang/int linked to libethereum-0.9.92-0/.-/clang/int\n///            0.1.2-5c3bfd4b*/.-/clang/int\n///            0.1.1-6ff4cd6b/RelWithDebInfo-Emscripten/clang/int\n/// New style: 0.4.5+commit.b318366e.Emscripten.clang\n\n\nfunction versionToSemver(version) {\n  // FIXME: parse more detail, but this is a good start\n  var parsed = version.match(/^([0-9]+\\.[0-9]+\\.[0-9]+)-([0-9a-f]{8})[/*].*$/);\n\n  if (parsed) {\n    return parsed[1] + '+commit.' + parsed[2];\n  }\n\n  if (version.indexOf('0.1.3-0') !== -1) {\n    return '0.1.3';\n  }\n\n  if (version.indexOf('0.3.5-0') !== -1) {\n    return '0.3.5';\n  } // assume it is already semver compatible\n\n\n  return version;\n}\n\nfunction translateErrors(ret, errors) {\n  for (var error in errors) {\n    var type = 'error';\n    var extractType = /^(.*):(\\d+):(\\d+):(.*):/;\n    extractType = extractType.exec(errors[error]);\n\n    if (extractType) {\n      type = extractType[4].trim();\n    } else if (errors[error].indexOf(': Warning:')) {\n      type = 'Warning';\n    } else if (errors[error].indexOf(': Error:')) {\n      type = 'Error';\n    }\n\n    ret.push({\n      type: type,\n      component: 'general',\n      severity: type === 'Warning' ? 'warning' : 'error',\n      message: errors[error],\n      formattedMessage: errors[error]\n    });\n  }\n}\n\nfunction translateGasEstimates(gasEstimates) {\n  if (gasEstimates === null) {\n    return 'infinite';\n  }\n\n  if (typeof gasEstimates === 'number') {\n    return gasEstimates.toString();\n  }\n\n  var gasEstimatesTranslated = {};\n\n  for (var func in gasEstimates) {\n    gasEstimatesTranslated[func] = translateGasEstimates(gasEstimates[func]);\n  }\n\n  return gasEstimatesTranslated;\n}\n\nfunction translateJsonCompilerOutput(output, libraries) {\n  var ret = {};\n  ret['errors'] = [];\n  var errors;\n\n  if (output['error']) {\n    errors = [output['error']];\n  } else {\n    errors = output['errors'];\n  }\n\n  translateErrors(ret['errors'], errors);\n  ret['contracts'] = {};\n\n  for (var contract in output['contracts']) {\n    // Split name first, can be `contract`, `:contract` or `filename:contract`\n    var tmp = contract.match(/^(([^:]*):)?([^:]+)$/);\n\n    if (tmp.length !== 4) {\n      // Force abort\n      return null;\n    }\n\n    var fileName = tmp[2];\n\n    if (fileName === undefined) {\n      // this is the case of `contract`\n      fileName = '';\n    }\n\n    var contractName = tmp[3];\n    var contractInput = output['contracts'][contract];\n    var gasEstimates = contractInput['gasEstimates'];\n    var translatedGasEstimates = {};\n\n    if (gasEstimates['creation']) {\n      translatedGasEstimates['creation'] = {\n        'codeDepositCost': translateGasEstimates(gasEstimates['creation'][1]),\n        'executionCost': translateGasEstimates(gasEstimates['creation'][0])\n      };\n    }\n\n    if (gasEstimates['internal']) {\n      translatedGasEstimates['internal'] = translateGasEstimates(gasEstimates['internal']);\n    }\n\n    if (gasEstimates['external']) {\n      translatedGasEstimates['external'] = translateGasEstimates(gasEstimates['external']);\n    }\n\n    var contractOutput = {\n      'abi': JSON.parse(contractInput['interface']),\n      'metadata': contractInput['metadata'],\n      'evm': {\n        'legacyAssembly': contractInput['assembly'],\n        'bytecode': {\n          'object': contractInput['bytecode'] && linker.linkBytecode(contractInput['bytecode'], libraries || {}),\n          'opcodes': contractInput['opcodes'],\n          'sourceMap': contractInput['srcmap'],\n          'linkReferences': contractInput['bytecode'] && linker.findLinkReferences(contractInput['bytecode'])\n        },\n        'deployedBytecode': {\n          'object': contractInput['runtimeBytecode'] && linker.linkBytecode(contractInput['runtimeBytecode'], libraries || {}),\n          'sourceMap': contractInput['srcmapRuntime'],\n          'linkReferences': contractInput['runtimeBytecode'] && linker.findLinkReferences(contractInput['runtimeBytecode'])\n        },\n        'methodIdentifiers': contractInput['functionHashes'],\n        'gasEstimates': translatedGasEstimates\n      }\n    };\n\n    if (!ret['contracts'][fileName]) {\n      ret['contracts'][fileName] = {};\n    }\n\n    ret['contracts'][fileName][contractName] = contractOutput;\n  }\n\n  var sourceMap = {};\n\n  for (var sourceId in output['sourceList']) {\n    sourceMap[output['sourceList'][sourceId]] = sourceId;\n  }\n\n  ret['sources'] = {};\n\n  for (var source in output['sources']) {\n    ret['sources'][source] = {\n      id: sourceMap[source],\n      legacyAST: output['sources'][source].AST\n    };\n  }\n\n  return ret;\n}\n\nfunction escapeString(text) {\n  return text.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t');\n} // 'asm' can be an object or a string\n\n\nfunction formatAssemblyText(asm, prefix, source) {\n  if (typeof asm === 'string' || asm === null || asm === undefined) {\n    return prefix + (asm || '') + '\\n';\n  }\n\n  var text = prefix + '.code\\n';\n  asm['.code'].forEach(function (item, i) {\n    var v = item.value === undefined ? '' : item.value;\n    var src = '';\n\n    if (source !== undefined && item.begin !== undefined && item.end !== undefined) {\n      src = escapeString(source.slice(item.begin, item.end));\n    }\n\n    if (src.length > 30) {\n      src = src.slice(0, 30) + '...';\n    }\n\n    if (item.name !== 'tag') {\n      text += '  ';\n    }\n\n    text += prefix + item.name + ' ' + v + '\\t\\t\\t' + src + '\\n';\n  });\n  text += prefix + '.data\\n';\n  var asmData = asm['.data'] || [];\n\n  for (var i in asmData) {\n    var item = asmData[i];\n    text += '  ' + prefix + '' + i + ':\\n';\n    text += formatAssemblyText(item, prefix + '    ', source);\n  }\n\n  return text;\n}\n\nfunction prettyPrintLegacyAssemblyJSON(assembly, source) {\n  return formatAssemblyText(assembly, '', source);\n}\n\nmodule.exports = {\n  versionToSemver: versionToSemver,\n  translateJsonCompilerOutput: translateJsonCompilerOutput,\n  prettyPrintLegacyAssemblyJSON: prettyPrintLegacyAssemblyJSON\n};","map":{"version":3,"sources":["/home/codaruuu/Desktop/reactClient/remixclient/node_modules/solc/translate.js"],"names":["linker","require","versionToSemver","version","parsed","match","indexOf","translateErrors","ret","errors","error","type","extractType","exec","trim","push","component","severity","message","formattedMessage","translateGasEstimates","gasEstimates","toString","gasEstimatesTranslated","func","translateJsonCompilerOutput","output","libraries","contract","tmp","length","fileName","undefined","contractName","contractInput","translatedGasEstimates","contractOutput","JSON","parse","linkBytecode","findLinkReferences","sourceMap","sourceId","source","id","legacyAST","AST","escapeString","text","replace","formatAssemblyText","asm","prefix","forEach","item","i","v","value","src","begin","end","slice","name","asmData","prettyPrintLegacyAssemblyJSON","assembly","module","exports"],"mappings":"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","sourcesContent":["var linker = require('./linker.js');\n\n/// Translate old style version numbers to semver.\n/// Old style: 0.3.6-3fc68da5/Release-Emscripten/clang\n///            0.3.5-371690f0/Release-Emscripten/clang/Interpreter\n///            0.3.5-0/Release-Emscripten/clang/Interpreter\n///            0.2.0-e7098958/.-Emscripten/clang/int linked to libethereum-1.1.1-bbb80ab0/.-Emscripten/clang/int\n///            0.1.3-0/.-/clang/int linked to libethereum-0.9.92-0/.-/clang/int\n///            0.1.2-5c3bfd4b*/.-/clang/int\n///            0.1.1-6ff4cd6b/RelWithDebInfo-Emscripten/clang/int\n/// New style: 0.4.5+commit.b318366e.Emscripten.clang\nfunction versionToSemver (version) {\n  // FIXME: parse more detail, but this is a good start\n  var parsed = version.match(/^([0-9]+\\.[0-9]+\\.[0-9]+)-([0-9a-f]{8})[/*].*$/);\n  if (parsed) {\n    return parsed[1] + '+commit.' + parsed[2];\n  }\n  if (version.indexOf('0.1.3-0') !== -1) {\n    return '0.1.3';\n  }\n  if (version.indexOf('0.3.5-0') !== -1) {\n    return '0.3.5';\n  }\n  // assume it is already semver compatible\n  return version;\n}\n\nfunction translateErrors (ret, errors) {\n  for (var error in errors) {\n    var type = 'error';\n    var extractType = /^(.*):(\\d+):(\\d+):(.*):/;\n    extractType = extractType.exec(errors[error]);\n    if (extractType) {\n      type = extractType[4].trim();\n    } else if (errors[error].indexOf(': Warning:')) {\n      type = 'Warning';\n    } else if (errors[error].indexOf(': Error:')) {\n      type = 'Error';\n    }\n    ret.push({\n      type: type,\n      component: 'general',\n      severity: (type === 'Warning') ? 'warning' : 'error',\n      message: errors[error],\n      formattedMessage: errors[error]\n    });\n  }\n}\n\nfunction translateGasEstimates (gasEstimates) {\n  if (gasEstimates === null) {\n    return 'infinite';\n  }\n\n  if (typeof gasEstimates === 'number') {\n    return gasEstimates.toString();\n  }\n\n  var gasEstimatesTranslated = {};\n  for (var func in gasEstimates) {\n    gasEstimatesTranslated[func] = translateGasEstimates(gasEstimates[func]);\n  }\n  return gasEstimatesTranslated;\n}\n\nfunction translateJsonCompilerOutput (output, libraries) {\n  var ret = {};\n\n  ret['errors'] = [];\n  var errors;\n  if (output['error']) {\n    errors = [ output['error'] ];\n  } else {\n    errors = output['errors'];\n  }\n  translateErrors(ret['errors'], errors);\n\n  ret['contracts'] = {};\n  for (var contract in output['contracts']) {\n    // Split name first, can be `contract`, `:contract` or `filename:contract`\n    var tmp = contract.match(/^(([^:]*):)?([^:]+)$/);\n    if (tmp.length !== 4) {\n      // Force abort\n      return null;\n    }\n    var fileName = tmp[2];\n    if (fileName === undefined) {\n      // this is the case of `contract`\n      fileName = '';\n    }\n    var contractName = tmp[3];\n\n    var contractInput = output['contracts'][contract];\n\n    var gasEstimates = contractInput['gasEstimates'];\n    var translatedGasEstimates = {};\n\n    if (gasEstimates['creation']) {\n      translatedGasEstimates['creation'] = {\n        'codeDepositCost': translateGasEstimates(gasEstimates['creation'][1]),\n        'executionCost': translateGasEstimates(gasEstimates['creation'][0])\n      };\n    }\n    if (gasEstimates['internal']) {\n      translatedGasEstimates['internal'] = translateGasEstimates(gasEstimates['internal']);\n    }\n    if (gasEstimates['external']) {\n      translatedGasEstimates['external'] = translateGasEstimates(gasEstimates['external']);\n    }\n\n    var contractOutput = {\n      'abi': JSON.parse(contractInput['interface']),\n      'metadata': contractInput['metadata'],\n      'evm': {\n        'legacyAssembly': contractInput['assembly'],\n        'bytecode': {\n          'object': contractInput['bytecode'] && linker.linkBytecode(contractInput['bytecode'], libraries || {}),\n          'opcodes': contractInput['opcodes'],\n          'sourceMap': contractInput['srcmap'],\n          'linkReferences': contractInput['bytecode'] && linker.findLinkReferences(contractInput['bytecode'])\n        },\n        'deployedBytecode': {\n          'object': contractInput['runtimeBytecode'] && linker.linkBytecode(contractInput['runtimeBytecode'], libraries || {}),\n          'sourceMap': contractInput['srcmapRuntime'],\n          'linkReferences': contractInput['runtimeBytecode'] && linker.findLinkReferences(contractInput['runtimeBytecode'])\n        },\n        'methodIdentifiers': contractInput['functionHashes'],\n        'gasEstimates': translatedGasEstimates\n      }\n    };\n\n    if (!ret['contracts'][fileName]) {\n      ret['contracts'][fileName] = {};\n    }\n\n    ret['contracts'][fileName][contractName] = contractOutput;\n  }\n\n  var sourceMap = {};\n  for (var sourceId in output['sourceList']) {\n    sourceMap[output['sourceList'][sourceId]] = sourceId;\n  }\n\n  ret['sources'] = {};\n  for (var source in output['sources']) {\n    ret['sources'][source] = {\n      id: sourceMap[source],\n      legacyAST: output['sources'][source].AST\n    };\n  }\n\n  return ret;\n}\n\nfunction escapeString (text) {\n  return text\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t');\n}\n\n// 'asm' can be an object or a string\nfunction formatAssemblyText (asm, prefix, source) {\n  if (typeof asm === 'string' || asm === null || asm === undefined) {\n    return prefix + (asm || '') + '\\n';\n  }\n  var text = prefix + '.code\\n';\n  asm['.code'].forEach(function (item, i) {\n    var v = item.value === undefined ? '' : item.value;\n    var src = '';\n    if (source !== undefined && item.begin !== undefined && item.end !== undefined) {\n      src = escapeString(source.slice(item.begin, item.end));\n    }\n    if (src.length > 30) {\n      src = src.slice(0, 30) + '...';\n    }\n    if (item.name !== 'tag') {\n      text += '  ';\n    }\n    text += prefix + item.name + ' ' + v + '\\t\\t\\t' + src + '\\n';\n  });\n  text += prefix + '.data\\n';\n  var asmData = asm['.data'] || [];\n  for (var i in asmData) {\n    var item = asmData[i];\n    text += '  ' + prefix + '' + i + ':\\n';\n    text += formatAssemblyText(item, prefix + '    ', source);\n  }\n  return text;\n}\n\nfunction prettyPrintLegacyAssemblyJSON (assembly, source) {\n  return formatAssemblyText(assembly, '', source);\n}\n\nmodule.exports = {\n  versionToSemver: versionToSemver,\n  translateJsonCompilerOutput: translateJsonCompilerOutput,\n  prettyPrintLegacyAssemblyJSON: prettyPrintLegacyAssemblyJSON\n};\n"]},"metadata":{},"sourceType":"script"}